#  Базовое описание сущности "Contexts"
entities:
  contexts:
    # Определяет пути к объектам сущности
    objects:
      context: 
        route: "/:dh-context-id"            # Путь к объектам компонента
        title: Арх. контекст                # Название объекта
        presentation: plantuml              # Презентация объекта по умолчанию
        # JSONata генератор символа в svg для представления в диаграммах. 
        #  $params.subject - передается объект рендеринга. Может быть не определен. В этом случае, необходимо вернуть неспецифичный (общий) символ объекта.
        #  $               - Data Lake архитектуры. Может быть не определен, если Data Lake недоступен.
        symbol: >     
          (
            /* Обрабатываем входящие параметры */
            $manifest := $;
            $contextId := ($params.subject.$spread().($keys()[0])[0])~>$substring(11);
            $contextId := $eval($contextId);
            $defConfig := $manifest.entities.contexts.config;
          
            /* Высота строки аспекта */
            $rowHeight := 14;
            /* Отступы */
            $padding := 8;
            /* Отступы */
            $headerOffset := 12;
            /* Ширину символа */
            $fontWidth := 7;
            /* Высота символа */
            $fontHeight := 12;

            /* Определяем заголовок */
            $header := $context.title ? $context.title : $contextId;
          
            /* Получаем коллекцию дефолтных вспомогательных функций */
            $defFunctions := $manifest.entities.contexts.api;

            /* Получаем список компонентов входящих в контекст */
            $components := $eval($defFunctions.fetchComponents, {
              "manifest": $manifest,
              "contextId": $contextId,
              "extra-links": false
            });
            /* Определяем количество компонентов для вычисления высоты символа */
            $componentCount := $count($components.*);

            /* Определяем максимальную длину текста для вычисления ширины символа */
            $maxTitle := $max([$max($components.*.($length(title))), $length($header)]);

            /* Вычисляем размеры символа */
            $width := $maxTitle ? $maxTitle * $fontWidth + $padding * 2 : 64; /* Умножаем на ширину символа */   
            $height := ($componentCount + 1) * $rowHeight + $padding * 2 + $headerOffset; /* Умножаем на высоту строки */
            /* Генерируем символ */
            '<svg fill="#000000" width="' & $width & 'px" height="' & $height & 'px" viewBox="0 0 ' & $width & ' ' & $height & '" version="1.1" xmlns="http://www.w3.org/2000/svg">' 
                  & '<g>'
                      /* Создаем контейнер */
                      & '<rect width="' & $width & 'px" height="' & $height & 'px" fill=\"#E0F7FA\" stroke=\"#004D40\" rx="3" />'
                      /* Создаем заголовок */
                      & '<text x="50%" y="12" style="font-size:' & $fontHeight & '" fill="#004D40" text-anchor="middle" dominant-baseline="middle" >' & $header & '</text>'
                      /* Заполняем компонентами */
                      & $join($map($components.*, function($v, $i) {(
                          '<a href=\"@component/' & $v.id & '\" >'
                          & '<text x="6" y="' & ($i * $rowHeight + $padding + $rowHeight + $headerOffset) & '" style="font-size:' & $fontHeight & '" fill="blue">' & $v.title & '</text>'
                          & '</a>'
                      )}))
                  & '</g>'
            & '</svg>';
          )